void __cdecl RenderBoxInternal(
        const Vector *vOrigin,
        const QAngle *angles,
        const Vector *vMins,
        const Vector *vMaxs,
        Color c,
        IMaterial *pMaterial,
        bool bInsideOut)
{
  IMatRenderContext *v7; // esi
  IMesh *v8; // ebx
  ICallQueue *v9; // edi
  __int64 v10; // xmm0_8
  float z; // ecx
  float v12; // edx
  float v13; // eax
  CFunctor7<void (__cdecl*)(Vector const &,QAngle const &,Vector const &,Vector const &,Color,IMaterial *,bool),Vector,QAngle,Vector,Vector,Color,IMaterial *,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT> > > *v14; // eax
  CFunctor *v15; // eax
  int v16; // eax
  int v17; // edi
  int v18; // xmm1_4
  bool v19; // zf
  int (*v20)[4]; // ebx
  int j; // esi
  float *m_pCurrPosition; // ecx
  int v23; // ebp
  float y; // xmm1_4
  Vector *v25; // eax
  float *m_pCurrNormal; // eax
  float *v27; // eax
  float *v28; // ecx
  float v29; // xmm0_4
  float *v30; // eax
  float v31; // xmm0_4
  float *v32; // eax
  float *v33; // ecx
  float v34; // xmm0_4
  Vector *v35; // eax
  float *v36; // eax
  float v37; // xmm0_4
  float *v38; // eax
  MaterialPrimitiveType_t m_Type; // esi
  int v40; // eax
  int v41; // esi
  Vector vecNormal; // [esp+24h] [ebp-290h] BYREF
  int i; // [esp+30h] [ebp-284h]
  int v44; // [esp+34h] [ebp-280h]
  IMesh *pMesh; // [esp+38h] [ebp-27Ch]
  CMatRenderContextPtr pRenderContext; // [esp+3Ch] [ebp-278h]
  int i1; // [esp+40h] [ebp-274h]
  int v48; // [esp+44h] [ebp-270h]
  Vector arg3; // [esp+48h] [ebp-26Ch] BYREF
  Vector arg1; // [esp+54h] [ebp-260h] BYREF
  QAngle arg2; // [esp+60h] [ebp-254h] BYREF
  CMeshBuilder v52; // [esp+6Ch] [ebp-248h] BYREF
  Vector v53[8]; // [esp+254h] [ebp-60h] BYREF

  InitializeStandardMaterials();
  v7 = materials->GetRenderContext(materials);
  v8 = 0;
  i1 = (int)v7;
  if ( v7 )
    v7->BeginRender(v7);
  v9 = v7->GetCallQueue(v7);
  if ( v9 )
  {
    v10 = *(_QWORD *)&vMaxs->x;
    i = LODWORD(vMaxs->z);
    z = vMins->z;
    *(_QWORD *)&vecNormal.y = v10;
    v12 = angles->z;
    *(_QWORD *)&arg3.x = *(_QWORD *)&vMins->x;
    *(_QWORD *)&arg2.x = *(_QWORD *)&angles->x;
    v13 = vOrigin->z;
    arg3.z = z;
    arg2.z = v12;
    *(_QWORD *)&arg1.x = *(_QWORD *)&vOrigin->x;
    arg1.z = v13;
    v14 = (CFunctor7<void (__cdecl*)(Vector const &,QAngle const &,Vector const &,Vector const &,Color,IMaterial *,bool),Vector,QAngle,Vector,Vector,Color,IMaterial *,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT> > > *)operator new(0x50u);
    if ( v14 )
      CFunctor7<void (__cdecl *)(Vector const &,QAngle const &,Vector const &,Vector const &,Color,IMaterial *,bool),Vector,QAngle,Vector,Vector,Color,IMaterial *,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT>>>::CFunctor7<void (__cdecl *)(Vector const &,QAngle const &,Vector const &,Vector const &,Color,IMaterial *,bool),Vector,QAngle,Vector,Vector,Color,IMaterial *,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT>>>(
        v14,
        RenderBoxInternal,
        &arg1,
        &arg2,
        &arg3,
        (Vector *)&vecNormal.y,
        &c,
        &pMaterial,
        &bInsideOut);
    else
      v15 = 0;
    v9->QueueFunctorInternal(v9, v15);
    v7->EndRender(v7);
    v7->Release(v7);
  }
  else
  {
    v7->Bind(v7, pMaterial, 0);
    GenerateBoxVertices(vOrigin, vMins, vMaxs, v53);
    pRenderContext.m_pObject = (IMatRenderContext *)v7->GetDynamicMesh(v7, 1, 0, 0, 0);
    CMeshBuilder::CMeshBuilder(&v52);
    v52.m_pMesh = (IMesh *)pRenderContext.m_pObject;
    v52.m_bGenerateIndices = 1;
    v52.m_Type = MATERIAL_TRIANGLES;
    pRenderContext.m_pObject->BindLightmapPage(pRenderContext.m_pObject, 2);
    v52.m_pMesh->LockMesh(v52.m_pMesh, 36, 36, &v52);
    v52.m_IndexBuilder.m_nIndexOffset = v52.m_nFirstVertex;
    v52.m_IndexBuilder.m_pIndexBuffer = (IIndexBuffer *)&pRenderContext.m_pObject[1];
    v52.m_IndexBuilder.m_nIndexCount = 0;
    v52.m_IndexBuilder.m_nMaxIndexCount = 36;
    v52.m_IndexBuilder.m_bModify = 0;
    v52.m_IndexBuilder.m_pIndices = v52.m_pIndices;
    v52.m_IndexBuilder.m_nIndexSize = v52.m_nIndexSize;
    v52.m_IndexBuilder.m_nCurrentIndex = 0;
    CVertexBuilder::AttachBegin(&v52.m_VertexBuilder, (IMesh *)pRenderContext.m_pObject, 36, &v52);
    v52.m_IndexBuilder.m_nCurrentIndex = 0;
    CVertexBuilder::Reset(&v52.m_VertexBuilder);
    v16 = 0;
    v44 = 0;
    v17 = c._color[2] | ((c._color[1] | ((c._color[0] | (c._color[3] << 8)) << 8)) << 8);
    for ( pMesh = 0; ; v8 = pMesh )
    {
      vecNormal.y = 0.0;
      vecNormal.z = 0.0;
      i = 0;
      v18 = (v16 & 1) != 0 ? LODWORD(FLOAT_1_0) : LODWORD(FLOAT_N1_0);
      v19 = !bInsideOut;
      *((_DWORD *)&vecNormal.y + v16 / 2) = v18;
      v20 = v19
          ? (int (*)[4])((char *)s_pBoxFaceIndices + (_DWORD)v8)
          : (int (*)[4])((char *)s_pBoxFaceIndicesInsideOut + (_DWORD)v8);
      for ( j = 1; j < 3; ++j )
      {
        m_pCurrPosition = v52.m_VertexBuilder.m_pCurrPosition;
        v23 = (*v20)[j + 1];
        y = vecNormal.y;
        v48 = (*v20)[j];
        v25 = &v53[(*v20)[0]];
        *v52.m_VertexBuilder.m_pCurrPosition = v25->x;
        v25 = (Vector *)((char *)v25 + 4);
        *++m_pCurrPosition = v25->x;
        m_pCurrPosition[1] = v25->y;
        *(_DWORD *)v52.m_VertexBuilder.m_pCurrColor = v17;
        m_pCurrNormal = v52.m_VertexBuilder.m_pCurrNormal;
        *v52.m_VertexBuilder.m_pCurrNormal = y;
        *++m_pCurrNormal = vecNormal.z;
        *((_DWORD *)m_pCurrNormal + 1) = i;
        v27 = v52.m_VertexBuilder.m_pCurrTexCoord[0];
        *v52.m_VertexBuilder.m_pCurrTexCoord[0] = 0.0;
        v27[1] = 0.0;
        CVertexBuilder::AdvanceVertex(&v52.m_VertexBuilder);
        v28 = v52.m_VertexBuilder.m_pCurrPosition;
        v29 = vecNormal.y;
        *v52.m_VertexBuilder.m_pCurrPosition = v53[v23].x;
        *++v28 = v53[v23].y;
        v28[1] = v53[v23].z;
        *(_DWORD *)v52.m_VertexBuilder.m_pCurrColor = v17;
        v30 = v52.m_VertexBuilder.m_pCurrNormal;
        *v52.m_VertexBuilder.m_pCurrNormal = v29;
        *++v30 = vecNormal.z;
        *((_DWORD *)v30 + 1) = i;
        if ( j == 1 )
          v31 = FLOAT_1_0;
        else
          v31 = 0.0;
        v32 = v52.m_VertexBuilder.m_pCurrTexCoord[0];
        *v52.m_VertexBuilder.m_pCurrTexCoord[0] = FLOAT_1_0;
        v32[1] = v31;
        CVertexBuilder::AdvanceVertex(&v52.m_VertexBuilder);
        v33 = v52.m_VertexBuilder.m_pCurrPosition;
        v34 = vecNormal.y;
        v35 = &v53[v48];
        *v52.m_VertexBuilder.m_pCurrPosition = v35->x;
        v35 = (Vector *)((char *)v35 + 4);
        *++v33 = v35->x;
        v33[1] = v35->y;
        *(_DWORD *)v52.m_VertexBuilder.m_pCurrColor = v17;
        v36 = v52.m_VertexBuilder.m_pCurrNormal;
        *v52.m_VertexBuilder.m_pCurrNormal = v34;
        *++v36 = vecNormal.z;
        *((_DWORD *)v36 + 1) = i;
        if ( j == 1 )
          v37 = 0.0;
        else
          v37 = FLOAT_1_0;
        v38 = v52.m_VertexBuilder.m_pCurrTexCoord[0];
        *v52.m_VertexBuilder.m_pCurrTexCoord[0] = v37;
        v38[1] = FLOAT_1_0;
        CVertexBuilder::AdvanceVertex(&v52.m_VertexBuilder);
      }
      ++v44;
      pMesh += 2;
      if ( (int)pMesh >= 96 )
        break;
      v16 = v44;
    }
    if ( v52.m_bGenerateIndices )
    {
      m_Type = v52.m_Type;
      v40 = CMeshBuilder::IndicesFromVertices(&v52, v52.m_Type, v52.m_VertexBuilder.m_nVertexCount);
      CIndexBuilder::GenerateIndices(&v52.m_IndexBuilder, m_Type, v40);
    }
    v52.m_pMesh->UnlockMesh(v52.m_pMesh, v52.m_VertexBuilder.m_nVertexCount, v52.m_IndexBuilder.m_nIndexCount, &v52);
    v52.m_IndexBuilder.m_pIndexBuffer = 0;
    v52.m_IndexBuilder.m_nMaxIndexCount = 0;
    v52.m_VertexBuilder.m_nMaxVertexCount = 0;
    v52.m_VertexBuilder.m_pVertexBuffer = 0;
    v52.m_VertexBuilder.m_CompressionType = VERTEX_COMPRESSION_INVALID;
    v52.m_pMesh = 0;
    ((void (__thiscall *)(IMatRenderContext *, int, _DWORD))pRenderContext.m_pObject->ClearBuffers)(
      pRenderContext.m_pObject,
      -1,
      0);
    if ( v52.m_VertexBuilder.m_pVertexBuffer
      && v52.m_VertexBuilder.m_pVertexBuffer->IsDynamic(v52.m_VertexBuilder.m_pVertexBuffer) )
    {
      v52.m_VertexBuilder.m_pVertexBuffer->EndCastBuffer(v52.m_VertexBuilder.m_pVertexBuffer);
    }
    if ( v52.m_IndexBuilder.m_pIndexBuffer
      && v52.m_IndexBuilder.m_pIndexBuffer->IsDynamic(v52.m_IndexBuilder.m_pIndexBuffer) )
    {
      v52.m_IndexBuilder.m_pIndexBuffer->EndCastBuffer(v52.m_IndexBuilder.m_pIndexBuffer);
    }
    v41 = i1;
    (*(void (__thiscall **)(int))(*(_DWORD *)i1 + 12))(i1);
    (*(void (__thiscall **)(int))(*(_DWORD *)v41 + 4))(v41);
  }
}