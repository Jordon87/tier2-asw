void __cdecl RenderWireframeSphere(const Vector *vCenter, float flRadius, int nTheta, int nPhi, Color c, bool bZBuffer)
{
  IMatRenderContext *v6; // esi
  ICallQueue *v7; // edi
  float z; // ebx
  char *v9; // eax
  int v10; // edi
  int v11; // ebp
  int v12; // esi
  int v13; // ebx
  int v14; // eax
  int v15; // eax
  int v16; // ebp
  float v17; // xmm0_4
  float v18; // xmm0_4
  double v19; // xmm0_8
  float *m_pCurrNormal; // edi
  float v21; // xmm0_4
  int m_nTotalIndexCount; // ecx
  __int16 v23; // dx
  int v24; // ebx
  int v25; // ecx
  int v26; // ecx
  int v27; // ecx
  bool v28; // zf
  int m_nCurrentVertex; // eax
  int v30; // [esp+24h] [ebp-220h]
  int v31; // [esp+24h] [ebp-220h]
  CMatRenderContextPtr pRenderContext; // [esp+28h] [ebp-21Ch]
  IMatRenderContext *v33; // [esp+2Ch] [ebp-218h]
  float v34; // [esp+30h] [ebp-214h]
  float v35; // [esp+34h] [ebp-210h]
  float v36; // [esp+38h] [ebp-20Ch]
  float phi; // [esp+3Ch] [ebp-208h]
  IMesh *v38; // [esp+44h] [ebp-200h]
  __int64 v39; // [esp+50h] [ebp-1F4h]
  CMeshBuilder meshBuilder; // [esp+58h] [ebp-1ECh] BYREF
  int nThetaa; // [esp+250h] [ebp+Ch]

  InitializeStandardMaterials();
  v6 = g_pMaterialSystem->GetRenderContext(g_pMaterialSystem);
  v33 = v6;
  if ( v6 )
    v6->BeginRender(v6);
  v7 = v6->GetCallQueue(v6);
  if ( v7 )
  {
    z = vCenter->z;
    v39 = *(_QWORD *)&vCenter->x;
    v9 = (char *)operator new(0x34u);
    if ( v9 )
    {
      *((_DWORD *)v9 + 3) = 1;
      *(_QWORD *)(v9 + 20) = v39;
      *((_DWORD *)v9 + 9) = nTheta;
      *((_DWORD *)v9 + 10) = nPhi;
      *(_DWORD *)v9 = &CFunctor6<void (__cdecl *)(Vector const &,float,int,int,Color,bool),Vector,float,int,int,Color,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT>>>::`vftable'{for `CFunctor'};
      *((_DWORD *)v9 + 2) = &CFunctor6<void (__cdecl *)(Vector const &,float,int,int,Color,bool),Vector,float,int,int,Color,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT>>>::`vftable'{for `CRefCountServiceBase<1,CRefMT>'};
      *((_DWORD *)v9 + 4) = RenderWireframeSphere;
      *((float *)v9 + 7) = z;
      *((float *)v9 + 8) = flRadius;
      *((Color *)v9 + 11) = c;
      v9[48] = bZBuffer;
    }
    else
    {
      v9 = 0;
    }
    v7->QueueFunctorInternal(v7, (CFunctor *)v9);
    v6->EndRender(v6);
    v6->Release(v6);
  }
  else
  {
    v10 = nPhi;
    v11 = nPhi - 1;
    v12 = nPhi * (nTheta + 1);
    v13 = (nPhi - 1) * (4 * (nTheta + 1) - 4);
    nThetaa = nTheta + 1;
    v14 = s_pWireframe;
    if ( !bZBuffer )
      v14 = s_pWireframeIgnoreZ;
    v33->Bind(v33, (IMaterial *)v14, 0);
    CMeshBuilder::CMeshBuilder((CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
    v38 = v33->GetDynamicMesh(v33, 1, 0, 0, 0);
    CMeshBuilder::Begin((CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight, v38, MATERIAL_LINES, v12, v13);
    v15 = 0;
    v30 = 0;
    if ( nPhi > 0 )
    {
      do
      {
        v16 = 0;
        if ( nThetaa > 0 )
        {
          v17 = *(double *)__libm_sse2_cos().m128_u64;
          v35 = v17 * flRadius;
          v18 = *(double *)__libm_sse2_sin().m128_u64;
          v34 = v18;
          do
          {
            v19 = *(double *)__libm_sse2_sin().m128_u64;
            m_pCurrNormal = meshBuilder.m_VertexBuilder.m_pCurrNormal;
            *(float *)&v19 = v19;
            v36 = (float)((float)(*(float *)&v19 * v34) * flRadius) + vCenter->y;
            phi = v35 + vCenter->z;
            v21 = *(double *)__libm_sse2_cos().m128_u64;
            *m_pCurrNormal = (float)((float)(v21 * v34) * flRadius) + vCenter->x;
            m_pCurrNormal[1] = v36;
            m_pCurrNormal[2] = phi;
            *(_DWORD *)meshBuilder.m_VertexBuilder.m_pCurrTexCoord[0] = c._color[2] | ((c._color[1] | ((c._color[0] | (c._color[3] << 8)) << 8)) << 8);
            CVertexBuilder::AdvanceVertex((CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight);
            ++v16;
          }
          while ( v16 < nThetaa );
          v15 = v30;
          v10 = nPhi;
        }
        v30 = ++v15;
      }
      while ( v15 < v10 );
      v11 = nPhi - 1;
    }
    if ( v11 > 0 )
    {
      m_nTotalIndexCount = meshBuilder.m_IndexBuilder.m_nTotalIndexCount;
      v23 = 0;
      pRenderContext.m_pObject = 0;
      v31 = v11;
      do
      {
        v24 = nThetaa - 1;
        if ( nThetaa - 1 > 0 )
        {
          do
          {
            *(_WORD *)(meshBuilder.m_IndexBuilder.m_nOffset + 2 * m_nTotalIndexCount) = v23
                                                                                      + LOWORD(meshBuilder.m_IndexBuilder.m_nCurrentIndex);
            v25 = (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer + meshBuilder.m_IndexBuilder.m_nTotalIndexCount;
            meshBuilder.m_IndexBuilder.m_nTotalIndexCount += (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer;
            if ( meshBuilder.m_IndexBuilder.m_nTotalIndexCount > meshBuilder.m_IndexBuilder.m_nIndexOffset )
              meshBuilder.m_IndexBuilder.m_nIndexOffset = v25;
            *(_WORD *)(meshBuilder.m_IndexBuilder.m_nOffset + 2 * v25) = v23
                                                                       + nThetaa
                                                                       + LOWORD(meshBuilder.m_IndexBuilder.m_nCurrentIndex);
            v26 = (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer + meshBuilder.m_IndexBuilder.m_nTotalIndexCount;
            meshBuilder.m_IndexBuilder.m_nTotalIndexCount += (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer;
            if ( meshBuilder.m_IndexBuilder.m_nTotalIndexCount > meshBuilder.m_IndexBuilder.m_nIndexOffset )
              meshBuilder.m_IndexBuilder.m_nIndexOffset = v26;
            *(_WORD *)(meshBuilder.m_IndexBuilder.m_nOffset + 2 * v26) = v23
                                                                       + LOWORD(meshBuilder.m_IndexBuilder.m_nCurrentIndex);
            v27 = (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer + meshBuilder.m_IndexBuilder.m_nTotalIndexCount;
            meshBuilder.m_IndexBuilder.m_nTotalIndexCount += (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer;
            if ( meshBuilder.m_IndexBuilder.m_nTotalIndexCount > meshBuilder.m_IndexBuilder.m_nIndexOffset )
              meshBuilder.m_IndexBuilder.m_nIndexOffset = v27;
            *(_WORD *)(meshBuilder.m_IndexBuilder.m_nOffset + 2 * v27) = LOWORD(meshBuilder.m_IndexBuilder.m_nCurrentIndex)
                                                                       + v23
                                                                       + 1;
            m_nTotalIndexCount = (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer
                               + meshBuilder.m_IndexBuilder.m_nTotalIndexCount;
            meshBuilder.m_IndexBuilder.m_nTotalIndexCount += (int)meshBuilder.m_IndexBuilder.m_pIndexBuffer;
            if ( meshBuilder.m_IndexBuilder.m_nTotalIndexCount > meshBuilder.m_IndexBuilder.m_nIndexOffset )
              meshBuilder.m_IndexBuilder.m_nIndexOffset = m_nTotalIndexCount;
            ++v23;
            --v24;
          }
          while ( v24 );
        }
        v23 = nThetaa + LOWORD(pRenderContext.m_pObject);
        v28 = v31-- == 1;
        pRenderContext.m_pObject = (IMatRenderContext *)((char *)pRenderContext.m_pObject + nThetaa);
      }
      while ( !v28 );
    }
    if ( LOBYTE(meshBuilder.m_IndexBuilder.m_pIndices) )
    {
      switch ( *(_DWORD *)&meshBuilder.m_bGenerateIndices )
      {
        case 4:
          m_nCurrentVertex = 2 * meshBuilder.m_VertexBuilder.m_nCurrentVertex - 2;
          break;
        case 5:
          m_nCurrentVertex = 2 * meshBuilder.m_VertexBuilder.m_nCurrentVertex;
          break;
        case 6:
          m_nCurrentVertex = 3 * meshBuilder.m_VertexBuilder.m_nCurrentVertex - 6;
          break;
        case 7:
          m_nCurrentVertex = 6 * meshBuilder.m_VertexBuilder.m_nCurrentVertex / 4;
          break;
        case 0xA:
          m_nCurrentVertex = 0;
          break;
        default:
          m_nCurrentVertex = meshBuilder.m_VertexBuilder.m_nCurrentVertex;
          break;
      }
      CIndexBuilder::GenerateIndices(
        (CIndexBuilder *)&meshBuilder.m_IndexBuilder.m_nOffset,
        *(MaterialPrimitiveType_t *)&meshBuilder.m_bGenerateIndices,
        m_nCurrentVertex);
    }
    (*(void (__thiscall **)(MaterialPrimitiveType_t, int, int, int *))(*(_DWORD *)meshBuilder.m_Type + 80))(
      meshBuilder.m_Type,
      meshBuilder.m_VertexBuilder.m_nCurrentVertex,
      meshBuilder.m_IndexBuilder.m_nIndexOffset,
      &meshBuilder.m_VertexSize_BoneWeight);
    meshBuilder.m_IndexBuilder.m_nMaxIndexCount = 0;
    meshBuilder.m_IndexBuilder.m_nIndexCount = 0;
    meshBuilder.m_VertexBuilder.m_nVertexCount = 0;
    *(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify = 0;
    meshBuilder.m_VertexBuilder.m_NumBoneWeights = -1;
    meshBuilder.m_Type = MATERIAL_POINTS;
    v38->Draw(v38, -1, 0);
    if ( *(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify
      && (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)&meshBuilder.m_VertexBuilder.m_bModify + 8))(*(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify) )
    {
      (*(void (__thiscall **)(_DWORD))(**(_DWORD **)&meshBuilder.m_VertexBuilder.m_bModify + 16))(*(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify);
    }
    if ( meshBuilder.m_IndexBuilder.m_nMaxIndexCount
      && (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)meshBuilder.m_IndexBuilder.m_nMaxIndexCount + 8))(meshBuilder.m_IndexBuilder.m_nMaxIndexCount) )
    {
      (*(void (__thiscall **)(int))(*(_DWORD *)meshBuilder.m_IndexBuilder.m_nMaxIndexCount + 16))(meshBuilder.m_IndexBuilder.m_nMaxIndexCount);
    }
    v33->EndRender(v33);
    v33->Release(v33);
  }
}