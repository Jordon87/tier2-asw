void __cdecl RenderWireframeSweptBox(
        const Vector *vStart,
        const Vector *vEnd,
        const QAngle *angles,
        const Vector *vMins,
        const Vector *vMaxs,
        Color c,
        bool bZBuffer)
{
  IMatRenderContext *v7; // esi
  int v8; // ebx
  int v9; // eax
  float *p_y; // esi
  float x; // xmm0_4
  float y; // xmm0_4
  int z_low; // xmm0_4
  float v14; // xmm0_4
  Color v15; // ebx
  int v16; // edi
  int v17; // esi
  int v18; // ebp
  int v19; // eax
  int v20; // ecx
  int v21; // edi
  int m_nCurrentVertex; // eax
  Color cActual; // [esp+28h] [ebp-2CCh]
  Color cActuala; // [esp+28h] [ebp-2CCh]
  int idx2; // [esp+30h] [ebp-2C4h]
  int idx1; // [esp+34h] [ebp-2C0h]
  CMatRenderContextPtr pRenderContext; // [esp+38h] [ebp-2BCh]
  IMatRenderContext *vDelta; // [esp+3Ch] [ebp-2B8h]
  float vDelta_4; // [esp+40h] [ebp-2B4h]
  float vDelta_8; // [esp+44h] [ebp-2B0h]
  float pMesh; // [esp+48h] [ebp-2ACh]
  Vector temp; // [esp+4Ch] [ebp-2A8h] BYREF
  CMeshBuilder meshBuilder; // [esp+58h] [ebp-29Ch] BYREF
  float dot[8]; // [esp+240h] [ebp-B4h]
  Vector pts[8]; // [esp+260h] [ebp-94h] BYREF
  matrix3x4_t fRotateMatrix; // [esp+2C0h] [ebp-34h] BYREF

  InitializeStandardMaterials();
  v7 = g_pMaterialSystem->GetRenderContext(g_pMaterialSystem);
  v8 = 0;
  vDelta = v7;
  if ( v7 )
    v7->BeginRender(v7);
  v9 = s_pWireframe;
  if ( !bZBuffer )
    v9 = s_pWireframeIgnoreZ;
  v7->Bind(v7, (IMaterial *)v9, 0);
  AngleMatrix(angles, (matrix3x4_t *)&fRotateMatrix.m_flMatVal[0][1]);
  LODWORD(temp.x) = v7->GetDynamicMesh(v7, 1, 0, 0, 0);
  CMeshBuilder::CMeshBuilder((CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
  meshBuilder.m_Type = LODWORD(temp.x);
  LOBYTE(meshBuilder.m_IndexBuilder.m_pIndices) = 1;
  *(_DWORD *)&meshBuilder.m_bGenerateIndices = 1;
  (*(void (__thiscall **)(_DWORD, int))(*(_DWORD *)LODWORD(temp.x) + 40))(LODWORD(temp.x), 1);
  (*(void (__thiscall **)(MaterialPrimitiveType_t, int, int, int *))(*(_DWORD *)meshBuilder.m_Type + 68))(
    meshBuilder.m_Type,
    60,
    60,
    &meshBuilder.m_VertexSize_BoneWeight);
  meshBuilder.m_IndexBuilder.m_nCurrentIndex = meshBuilder.MeshDesc_t::VertexDesc_t::m_nOffset;
  meshBuilder.m_IndexBuilder.m_nMaxIndexCount = LODWORD(temp.x) + 4;
  meshBuilder.m_IndexBuilder.m_nIndexOffset = 0;
  meshBuilder.m_IndexBuilder.m_nIndexCount = 60;
  LOBYTE(meshBuilder.m_VertexBuilder.m_VertexSize_Position) = 0;
  meshBuilder.m_IndexBuilder.m_nOffset = meshBuilder.MeshDesc_t::IndexDesc_t::m_nOffset;
  meshBuilder.m_IndexBuilder.m_pIndexBuffer = (IIndexBuffer *)meshBuilder.m_pMesh;
  meshBuilder.m_IndexBuilder.m_nTotalIndexCount = 0;
  CVertexBuilder::AttachBegin(
    (CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight,
    (IMesh *)LODWORD(temp.x),
    60,
    (const MeshDesc_t *)&meshBuilder.m_VertexSize_BoneWeight);
  meshBuilder.m_IndexBuilder.m_nTotalIndexCount = 0;
  CVertexBuilder::Reset((CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight);
  vDelta_4 = vEnd->x - vStart->x;
  vDelta_8 = vEnd->y - vStart->y;
  pMesh = vEnd->z - vStart->z;
  idx2 = 0;
  cActual = 0;
  p_y = &pts[0].y;
  do
  {
    if ( (v8 & 1) != 0 )
      x = vMaxs->x;
    else
      x = vMins->x;
    temp.y = x;
    if ( (v8 & 2) != 0 )
      y = vMaxs->y;
    else
      y = vMins->y;
    temp.z = y;
    if ( (v8 & 4) != 0 )
      z_low = LODWORD(vMaxs->z);
    else
      z_low = LODWORD(vMins->z);
    meshBuilder.m_VertexSize_Position = z_low;
    VectorRotate(&temp.y, (matrix3x4_t *)&fRotateMatrix.m_flMatVal[0][1], p_y);
    v14 = (float)((float)(p_y[2] * pMesh) + (float)(p_y[1] * vDelta_8)) + (float)(*p_y * vDelta_4);
    dot[v8 + 1] = v14;
    if ( *(float *)((char *)&dot[1] + *(_DWORD *)&cActual) > v14 )
    {
      idx2 = v8;
      cActual = (Color)(4 * v8);
    }
    ++v8;
    p_y += 3;
  }
  while ( v8 < 8 );
  v15 = c;
  DrawAxes(vStart, (Vector *)&pts[0].y, idx2, c, (CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
  DrawAxes(vEnd, (Vector *)&pts[0].y, idx2 ^ 7, c, (CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
  v16 = 2;
  cActuala = (Color)2;
  pRenderContext.m_pObject = (IMatRenderContext *)("bad allocation" + 3);
  while ( 1 )
  {
    v17 = 1 << ((v16 - 1) % 3);
    v18 = 1 << (v16 % 3);
    v19 = (v17 & idx2) != 0 ? idx2 - v17 : v17 + idx2;
    v20 = (idx2 & v18) != 0 ? idx2 - v18 : v18 + idx2;
    idx1 = v20;
    v21 = (idx2 & v18) != 0 ? v19 - v18 : v19 + v18;
    DrawExtrusionFace(
      vStart,
      vEnd,
      (Vector *)&pts[0].y,
      v19,
      v21,
      v15,
      (CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
    DrawExtrusionFace(
      vStart,
      vEnd,
      (Vector *)&pts[0].y,
      idx1,
      v21,
      c,
      (CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
    ++*(_DWORD *)&cActuala;
    if ( !--pRenderContext.m_pObject )
      break;
    v16 = (int)cActuala;
    v15 = c;
  }
  if ( LOBYTE(meshBuilder.m_IndexBuilder.m_pIndices) )
  {
    switch ( *(_DWORD *)&meshBuilder.m_bGenerateIndices )
    {
      case 4:
        m_nCurrentVertex = 2 * meshBuilder.m_VertexBuilder.m_nCurrentVertex - 2;
        break;
      case 5:
        m_nCurrentVertex = 2 * meshBuilder.m_VertexBuilder.m_nCurrentVertex;
        break;
      case 6:
        m_nCurrentVertex = 3 * meshBuilder.m_VertexBuilder.m_nCurrentVertex - 6;
        break;
      case 7:
        m_nCurrentVertex = 6 * meshBuilder.m_VertexBuilder.m_nCurrentVertex / 4;
        break;
      case 0xA:
        m_nCurrentVertex = 0;
        break;
      default:
        m_nCurrentVertex = meshBuilder.m_VertexBuilder.m_nCurrentVertex;
        break;
    }
    CIndexBuilder::GenerateIndices(
      (CIndexBuilder *)&meshBuilder.m_IndexBuilder.m_nOffset,
      *(MaterialPrimitiveType_t *)&meshBuilder.m_bGenerateIndices,
      m_nCurrentVertex);
  }
  (*(void (__thiscall **)(MaterialPrimitiveType_t, int, int, int *))(*(_DWORD *)meshBuilder.m_Type + 80))(
    meshBuilder.m_Type,
    meshBuilder.m_VertexBuilder.m_nCurrentVertex,
    meshBuilder.m_IndexBuilder.m_nIndexOffset,
    &meshBuilder.m_VertexSize_BoneWeight);
  meshBuilder.m_IndexBuilder.m_nMaxIndexCount = 0;
  meshBuilder.m_IndexBuilder.m_nIndexCount = 0;
  meshBuilder.m_VertexBuilder.m_nVertexCount = 0;
  *(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify = 0;
  meshBuilder.m_VertexBuilder.m_NumBoneWeights = -1;
  meshBuilder.m_Type = MATERIAL_POINTS;
  (*(void (__thiscall **)(_DWORD, int, _DWORD))(*(_DWORD *)LODWORD(temp.x) + 48))(LODWORD(temp.x), -1, 0);
  if ( *(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify
    && (*(unsigned __int8 (__thiscall **)(_DWORD))(**(_DWORD **)&meshBuilder.m_VertexBuilder.m_bModify + 8))(*(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify) )
  {
    (*(void (__thiscall **)(_DWORD))(**(_DWORD **)&meshBuilder.m_VertexBuilder.m_bModify + 16))(*(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify);
  }
  if ( meshBuilder.m_IndexBuilder.m_nMaxIndexCount
    && (*(unsigned __int8 (__thiscall **)(int))(*(_DWORD *)meshBuilder.m_IndexBuilder.m_nMaxIndexCount + 8))(meshBuilder.m_IndexBuilder.m_nMaxIndexCount) )
  {
    (*(void (__thiscall **)(int))(*(_DWORD *)meshBuilder.m_IndexBuilder.m_nMaxIndexCount + 16))(meshBuilder.m_IndexBuilder.m_nMaxIndexCount);
  }
  vDelta->EndRender(vDelta);
  vDelta->Release(vDelta);
}