void __cdecl RenderLine(const Vector *v1, const Vector *v2, Color c, bool bZBuffer)
{
  IMatRenderContext *v4; // ebp
  float z; // esi
  float v6; // edi
  char *v7; // eax
  int v8; // eax
  IMesh *v9; // edi
  float *m_pCurrNormal; // eax
  int v11; // esi
  float *v12; // eax
  MaterialPrimitiveType_t v13; // esi
  int v14; // eax
  ICallQueue *v15; // [esp+20h] [ebp-204h]
  __int64 v16; // [esp+24h] [ebp-200h]
  __int64 v17; // [esp+30h] [ebp-1F4h]
  CMeshBuilder meshBuilder; // [esp+38h] [ebp-1ECh] BYREF

  InitializeStandardMaterials();
  v4 = materials->GetRenderContext(materials);
  if ( v4 )
    v4->BeginRender(v4);
  v15 = v4->GetCallQueue(v4);
  if ( v15 )
  {
    z = v2->z;
    v6 = v1->z;
    v17 = *(_QWORD *)&v2->x;
    v16 = *(_QWORD *)&v1->x;
    v7 = (char *)operator new(0x34u);
    if ( v7 )
    {
      *((_DWORD *)v7 + 3) = 1;
      *(_QWORD *)(v7 + 20) = v16;
      *((_QWORD *)v7 + 4) = v17;
      *(_DWORD *)v7 = &CFunctor4<void (__cdecl *)(Vector const &,Vector const &,Color,bool),Vector,Vector,Color,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT>>>::`vftable'{for `CFunctor'};
      *((_DWORD *)v7 + 2) = &CFunctor4<void (__cdecl *)(Vector const &,Vector const &,Color,bool),Vector,Vector,Color,bool,CRefCounted1<CFunctor,CRefCountServiceBase<1,CRefMT>>>::`vftable'{for `CRefCountServiceBase<1,CRefMT>'};
      *((_DWORD *)v7 + 4) = RenderLine;
      *((float *)v7 + 7) = v6;
      *((float *)v7 + 10) = z;
      *((Color *)v7 + 11) = c;
      v7[48] = bZBuffer;
    }
    else
    {
      v7 = 0;
    }
    v15->QueueFunctorInternal(v15, (CFunctor *)v7);
    v4->EndRender(v4);
    v4->Release(v4);
  }
  else
  {
    v8 = s_pWireframe;
    if ( !bZBuffer )
      v8 = s_pWireframeIgnoreZ;
    v4->Bind(v4, (IMaterial *)v8, 0);
    v9 = v4->GetDynamicMesh(v4, 1, 0, 0, 0);
    CMeshBuilder::CMeshBuilder((CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
    meshBuilder.m_Type = (MaterialPrimitiveType_t)v9;
    LOBYTE(meshBuilder.m_IndexBuilder.m_pIndices) = 1;
    *(_DWORD *)&meshBuilder.m_bGenerateIndices = 1;
    v9->SetPrimitiveType(v9, MATERIAL_LINES);
    (*(void (__thiscall **)(MaterialPrimitiveType_t, int, int, int *))(*(_DWORD *)meshBuilder.m_Type + 68))(
      meshBuilder.m_Type,
      2,
      2,
      &meshBuilder.m_VertexSize_BoneWeight);
    meshBuilder.m_IndexBuilder.m_nCurrentIndex = meshBuilder.MeshDesc_t::VertexDesc_t::m_nOffset;
    meshBuilder.m_IndexBuilder.m_nMaxIndexCount = (int)&v9->IIndexBuffer;
    meshBuilder.m_IndexBuilder.m_nIndexOffset = 0;
    meshBuilder.m_IndexBuilder.m_nIndexCount = 2;
    LOBYTE(meshBuilder.m_VertexBuilder.m_VertexSize_Position) = 0;
    meshBuilder.m_IndexBuilder.m_nOffset = meshBuilder.MeshDesc_t::IndexDesc_t::m_nOffset;
    meshBuilder.m_IndexBuilder.m_pIndexBuffer = (IIndexBuffer *)meshBuilder.m_pMesh;
    meshBuilder.m_IndexBuilder.m_nTotalIndexCount = 0;
    CVertexBuilder::AttachBegin(
      (CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight,
      v9,
      2,
      (const MeshDesc_t *)&meshBuilder.m_VertexSize_BoneWeight);
    meshBuilder.m_IndexBuilder.m_nTotalIndexCount = 0;
    CVertexBuilder::Reset((CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight);
    m_pCurrNormal = meshBuilder.m_VertexBuilder.m_pCurrNormal;
    *meshBuilder.m_VertexBuilder.m_pCurrNormal = v1->x;
    *++m_pCurrNormal = v1->y;
    m_pCurrNormal[1] = v1->z;
    v11 = c._color[2] | ((c._color[1] | ((c._color[0] | (c._color[3] << 8)) << 8)) << 8);
    *(_DWORD *)meshBuilder.m_VertexBuilder.m_pCurrTexCoord[0] = v11;
    CVertexBuilder::AdvanceVertex((CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight);
    v12 = meshBuilder.m_VertexBuilder.m_pCurrNormal;
    *meshBuilder.m_VertexBuilder.m_pCurrNormal = v2->x;
    *++v12 = v2->y;
    v12[1] = v2->z;
    *(_DWORD *)meshBuilder.m_VertexBuilder.m_pCurrTexCoord[0] = v11;
    CVertexBuilder::AdvanceVertex((CVertexBuilder *)&meshBuilder.m_VertexBuilder.m_VertexSize_BoneWeight);
    if ( LOBYTE(meshBuilder.m_IndexBuilder.m_pIndices) )
    {
      v13 = *(_DWORD *)&meshBuilder.m_bGenerateIndices;
      v14 = CMeshBuilder::IndicesFromVertices(
              (CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight,
              *(MaterialPrimitiveType_t *)&meshBuilder.m_bGenerateIndices,
              meshBuilder.m_VertexBuilder.m_nCurrentVertex);
      CIndexBuilder::GenerateIndices((CIndexBuilder *)&meshBuilder.m_IndexBuilder.m_nOffset, v13, v14);
    }
    (*(void (__thiscall **)(MaterialPrimitiveType_t, int, int, int *))(*(_DWORD *)meshBuilder.m_Type + 80))(
      meshBuilder.m_Type,
      meshBuilder.m_VertexBuilder.m_nCurrentVertex,
      meshBuilder.m_IndexBuilder.m_nIndexOffset,
      &meshBuilder.m_VertexSize_BoneWeight);
    meshBuilder.m_IndexBuilder.m_nMaxIndexCount = 0;
    meshBuilder.m_IndexBuilder.m_nIndexCount = 0;
    meshBuilder.m_VertexBuilder.m_nVertexCount = 0;
    *(_DWORD *)&meshBuilder.m_VertexBuilder.m_bModify = 0;
    meshBuilder.m_VertexBuilder.m_NumBoneWeights = -1;
    meshBuilder.m_Type = MATERIAL_POINTS;
    v9->Draw(v9, -1, 0);
    CMeshBuilder::~CMeshBuilder((CMeshBuilder *)&meshBuilder.m_VertexSize_BoneWeight);
    v4->EndRender(v4);
    v4->Release(v4);
  }
}